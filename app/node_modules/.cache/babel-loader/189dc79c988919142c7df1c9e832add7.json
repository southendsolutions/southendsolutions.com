{"ast":null,"code":"/* global define, Promise */\n(function (root, factory) {\n  'use strict';\n\n  if (typeof module === 'object' && module.exports && typeof require === 'function') {\n    // CommonJS\n    module.exports = factory();\n  } else if (typeof define === 'function' && typeof define.amd === 'object') {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals\n    root.Queue = factory();\n  }\n})(this, function () {\n  'use strict';\n  /**\n   * @return {Object}\n   */\n\n  var LocalPromise = typeof Promise !== 'undefined' ? Promise : function () {\n    return {\n      then: function () {\n        throw new Error('Queue.configure() before use Queue');\n      }\n    };\n  };\n\n  var noop = function () {};\n  /**\n   * @param {*} value\n   * @returns {LocalPromise}\n   */\n\n\n  var resolveWith = function (value) {\n    if (value && typeof value.then === 'function') {\n      return value;\n    }\n\n    return new LocalPromise(function (resolve) {\n      resolve(value);\n    });\n  };\n  /**\n   * It limits concurrently executed promises\n   *\n   * @param {Number} [maxPendingPromises=Infinity] max number of concurrently executed promises\n   * @param {Number} [maxQueuedPromises=Infinity]  max number of queued promises\n   * @constructor\n   *\n   * @example\n   *\n   * var queue = new Queue(1);\n   *\n   * queue.add(function () {\n   *     // resolve of this promise will resume next request\n   *     return downloadTarballFromGithub(url, file);\n   * })\n   * .then(function (file) {\n   *     doStuffWith(file);\n   * });\n   *\n   * queue.add(function () {\n   *     return downloadTarballFromGithub(url, file);\n   * })\n   * // This request will be paused\n   * .then(function (file) {\n   *     doStuffWith(file);\n   * });\n   */\n\n\n  function Queue(maxPendingPromises, maxQueuedPromises, options) {\n    this.options = options = options || {};\n    this.pendingPromises = 0;\n    this.maxPendingPromises = typeof maxPendingPromises !== 'undefined' ? maxPendingPromises : Infinity;\n    this.maxQueuedPromises = typeof maxQueuedPromises !== 'undefined' ? maxQueuedPromises : Infinity;\n    this.queue = [];\n  }\n  /**\n   * Defines promise promiseFactory\n   * @param {Function} GlobalPromise\n   */\n\n\n  Queue.configure = function (GlobalPromise) {\n    LocalPromise = GlobalPromise;\n  };\n  /**\n   * @param {Function} promiseGenerator\n   * @return {LocalPromise}\n   */\n\n\n  Queue.prototype.add = function (promiseGenerator) {\n    var self = this;\n    return new LocalPromise(function (resolve, reject, notify) {\n      // Do not queue to much promises\n      if (self.queue.length >= self.maxQueuedPromises) {\n        reject(new Error('Queue limit reached'));\n        return;\n      } // Add to queue\n\n\n      self.queue.push({\n        promiseGenerator: promiseGenerator,\n        resolve: resolve,\n        reject: reject,\n        notify: notify || noop\n      });\n\n      self._dequeue();\n    });\n  };\n  /**\n   * Number of simultaneously running promises (which are resolving)\n   *\n   * @return {number}\n   */\n\n\n  Queue.prototype.getPendingLength = function () {\n    return this.pendingPromises;\n  };\n  /**\n   * Number of queued promises (which are waiting)\n   *\n   * @return {number}\n   */\n\n\n  Queue.prototype.getQueueLength = function () {\n    return this.queue.length;\n  };\n  /**\n   * @returns {boolean} true if first item removed from queue\n   * @private\n   */\n\n\n  Queue.prototype._dequeue = function () {\n    var self = this;\n\n    if (this.pendingPromises >= this.maxPendingPromises) {\n      return false;\n    } // Remove from queue\n\n\n    var item = this.queue.shift();\n\n    if (!item) {\n      if (this.options.onEmpty) {\n        this.options.onEmpty();\n      }\n\n      return false;\n    }\n\n    try {\n      this.pendingPromises++;\n      resolveWith(item.promiseGenerator()) // Forward all stuff\n      .then(function (value) {\n        // It is not pending now\n        self.pendingPromises--; // It should pass values\n\n        item.resolve(value);\n\n        self._dequeue();\n      }, function (err) {\n        // It is not pending now\n        self.pendingPromises--; // It should not mask errors\n\n        item.reject(err);\n\n        self._dequeue();\n      }, function (message) {\n        // It should pass notifications\n        item.notify(message);\n      });\n    } catch (err) {\n      self.pendingPromises--;\n      item.reject(err);\n\n      self._dequeue();\n    }\n\n    return true;\n  };\n\n  return Queue;\n});","map":null,"metadata":{},"sourceType":"script"}